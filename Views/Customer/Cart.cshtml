@model IEnumerable<E_Book_Store_1.Models.Cart_Item>
@{
    ViewBag.Title = "Cart";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container my-5">
    <h2 class="text-center mb-4">Your Shopping Cart</h2>

    @if (!Model.Any())
    {
        <div class="alert alert-info">Your cart is empty.</div>
    }
    else
    {
        <!-- Send cart to CustomerController.PlaceOrder -->
        <form method="post" action="@Url.Action("PlaceOrder", "Customer")" id="cart-form">
            @Html.AntiForgeryToken()

            <div class="row row-cols-1 row-cols-md-2 row-cols-lg-4 g-4">
                @foreach (var item in Model)
                {
                    <div class="col" id="cart-item-@item.cart_item_id">
                        <div class="card h-100 shadow-sm">
                            <div class="position-relative">
                                <img src="@Url.Content(item.Book.image)" class="card-img-top" alt="@item.Book.title"
                                     style="height: 200px; object-fit: cover;">
                            </div>
                            <div class="card-body bg-light">
                                <h5 class="card-title text-truncate">@item.Book.title</h5>
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <span class="text-primary fw-bold">USD @item.Book.price</span>
                                    <div class="quantity-input" style="width: 100px;">
                                        <input type="number"
                                               name="Quantities[@item.cart_item_id]"
                                               value="@item.quantity"
                                               min="1"
                                               max="@item.Book.stock"
                                               class="form-control quantity-field"
                                               data-price="@item.Book.price"
                                               data-item-id="@item.cart_item_id" />
                                    </div>
                                </div>
                                <div class="text-end mb-3">
                                    <span class="text-success fw-bold subtotal" id="subtotal-@item.cart_item_id">
                                        Subtotal: USD @(item.quantity * item.Book.price)
                                    </span>
                                </div>
                                <button type="button" class="btn btn-danger btn-sm remove-btn" data-item-id="@item.cart_item_id">
                                    Remove
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <div class="text-center mt-4">
                <button type="submit" class="btn btn-primary btn-sm px-5">
                    Place Order Now
                </button>
            </div>
        </form>
    }
</div>

<div class="text-end mt-4">
    <h4 id="total-price">Total: USD @Model.Sum(item => item.quantity * item.Book.price)</h4>
</div>


<script>
    // Update subtotal when quantity changes
    document.querySelectorAll('.quantity-field').forEach(input => {
        input.addEventListener('input', function () {
            const price = parseFloat(this.dataset.price);
            const itemId = this.dataset.itemId;
            const quantity = parseInt(this.value) || 1;

            // Update subtotal
            const subtotal = price * quantity;
            document.getElementById(`subtotal-${itemId}`).innerText = `Subtotal: USD ${subtotal.toFixed(2)}`;
            updateTotalPrice();
        });
    });

    function updateTotalPrice() {
        let total = 0;
        document.querySelectorAll('.quantity-field').forEach(input => {
            const price = parseFloat(input.dataset.price);
            const quantity = parseInt(input.value) || 1;
            total += price * quantity;
        });
        document.getElementById('total-price').innerText = `Total: USD ${total.toFixed(2)}`;
    }

    // Handle remove button click
    document.querySelectorAll('.remove-btn').forEach(button => {
        button.addEventListener('click', function () {
            const itemId = this.dataset.itemId;

            // Remove cart item via AJAX
            fetch('@Url.Action("RemoveFromCart", "Customer")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                body: JSON.stringify({ cartItemId: itemId })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Remove the item from the UI
                    document.getElementById(`cart-item-${itemId}`).remove();
                    updateTotalPrice();
                } else {
                    alert('Failed to remove the item from the cart.');
                }
            });
        });
    });
</script>

<style>
    .card {
        transition: transform 0.2s;
        border: none;
        border-radius: 15px;
        overflow: hidden;
    }

        .card:hover {
            transform: translateY(-5px);
        }

    .quantity-input input {
        border-radius: 5px;
        border: 2px solid #dee2e6;
    }

    .btn-primary {
        border-radius: 25px;
        padding: 10px 30px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 1px;
    }

    .btn-danger {
        border-radius: 15px;
        padding: 5px 15px;
        font-size: 14px;
    }

    .subtotal {
        font-size: 1rem;
    }
</style>
